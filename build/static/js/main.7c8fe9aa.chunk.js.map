{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Component","React","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","favoriteImage","id","e","undefined","state","favorites","setState","objectSpread","defineProperty","checkFavorite","handleSearch","event","preventDefault","adress","document","getElementById","value","updated","currentPage","fetchPhotos","console","log","photos","totalPhotos","perPage","hasMore","page","baseUrl","self","options","params","client_id","props","appId","per_page","query","axios","get","then","response","data","map","photo","push","parseInt","headers","length","results","react_default","a","createElement","className","type","placeholder","onClick","react_infinite_scroller_default","pageStart","loadMore","bind","App_List","ListItem","_this2","key","src","urls","small","alt","user","profile_image","href","portfolio_url","name","List","_ref","items","App_ListItem","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7c8fe9aa.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport \"./App.css\";\n\nconst { Component } = React;\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      photos: [],\n      favorites: {},\n      totalPhotos: 0,\n      perPage: 12,\n      currentPage: 1,\n      adress: \"\",\n      hasMore: true,\n      updated: false\n    };\n  }\n\n  favoriteImage = (id, e) => {\n    if (this.state.favorites[id] === undefined)\n      this.state.favorites[id] = false;\n    this.setState({\n      favorites: { ...this.state.favorites, [id]: !this.state.favorites[id] }\n    });\n  };\n  checkFavorite = id => {\n    return this.state.favorites[id];\n  };\n\n  componentDidMount() {\n    this.fetchPhotos(this.state.currentPage);\n  }\n  fetchPhotos(page) {\n    var self = this;\n    const { perPage } = this.state;\n    const { appId } = this.props;\n    const { currentPage } = this.state;\n    const { adress } = this.state;\n    var baseUrl;\n    const options = {\n      params: {\n        client_id: appId,\n        page: currentPage,\n        per_page: perPage,\n        query: adress\n      }\n    };\n    if (this.state.updated === false) {\n      baseUrl = \"https://api.unsplash.com/photos/curated\";\n      axios.get(baseUrl, options).then(response => {\n        if (response) {\n          if (options.params.page === 1) {\n            var photos = [];\n          } else {\n            var photos = self.state.photos;\n          }\n          response.data.map(photo => {\n            photos.push(photo);\n          });\n        }\n        self.setState({\n          photos: photos,\n          totalPhotos: parseInt(response.headers[\"x-total\"]),\n          currentPage: options.params.page + 1\n        });\n      });\n      if (this.state.photos.totalPhotos === this.state.photos.length) {\n        self.setState({\n          hasMore: false\n        });\n      }\n    } else {\n      baseUrl = \"https://api.unsplash.com/search/photos\";\n      axios.get(baseUrl, options).then(response => {\n        if (response) {\n          if (options.params.page === 1) {\n            var photos = [];\n          } else {\n            var photos = self.state.photos;\n          }\n          response.data.results.map(photo => {\n            photos.push(photo);\n          });\n        }\n        self.setState({\n          photos: photos,\n          totalPhotos: parseInt(response.headers[\"x-total\"]),\n          currentPage: options.params.page + 1\n        });\n      });\n      if (this.state.photos.totalPhotos === this.state.photos.length) {\n        self.setState({\n          hasMore: false\n        });\n      }\n    }\n  }\n  handleSearch = event => {\n    event.preventDefault();\n    this.state.adress = document.getElementById(\"search_text\").value;\n    if (this.state.adress) this.state.updated = true;\n    else this.state.updated = false;\n    this.state.currentPage=1;\n    this.fetchPhotos(1);\n    console.log(\"Button Clicked!\");\n  };\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"search\">\n          <form className=\"search_field\">\n            <input type=\"text\" id=\"search_text\" placeholder=\"Search\" />\n            <button\n              type=\"submit\"\n              id=\"search_button\"\n              onClick={this.handleSearch}\n            >\n              <i className=\"fa fa-search\" />\n            </button>\n          </form>\n        </div>\n        <InfiniteScroll\n          pageStart={0}\n          loadMore={this.fetchPhotos.bind(this)}\n          hasMore={this.state.hasMore}\n        >\n          <List\n            data={this.state.photos}\n            favoriteImage={this.favoriteImage}\n            checkFavorite={this.checkFavorite}\n          />\n        </InfiniteScroll>\n      </div>\n    );\n  }\n}\nclass ListItem extends Component {\n  render() {\n    return (\n      <div key={this.props.photo.id} className=\"grid__item card\">\n        <div className=\"card__body\">\n          <img src={this.props.photo.urls.small} alt=\"\" />\n        </div>\n        <div className=\"card__footer media\">\n          <img\n            src={this.props.photo.user.profile_image.small}\n            alt=\"\"\n            className=\"media__obj\"\n          />\n          <div className=\"media__body\">\n            <a href={this.props.photo.user.portfolio_url}>\n              {this.props.photo.user.name}\n            </a>\n            <span\n              className={\n                this.props.checkFavorite(this.props.photo.id)\n                  ? \"fa fa-heart favorite\"\n                  : \"fa fa-heart-o favorite\"\n              }\n              onClick={e => this.props.favoriteImage(this.props.photo.id, e)}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst List = ({ data, favoriteImage, checkFavorite }) => {\n  var items = data.map(photo => (\n    <ListItem\n      key={photo.id}\n      photo={photo}\n      favoriteImage={favoriteImage}\n      checkFavorite={checkFavorite}\n    />\n  ));\n  return <div className=\"grid\">{items}</div>;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <App\n    appId={\"dc7f31dd7f825257c785c19af12b47eed45974963d20ced5d5e617c59ace6faf\"}\n    baseUrl={\"https://api.unsplash.com/photos/curated\"}\n  />,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}